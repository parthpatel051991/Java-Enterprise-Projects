package in.ineuron.breakerconfig;

import java.time.Duration;

import org.springframework.cloud.circuitbreaker.resilience4j.Resilience4JCircuitBreakerFactory;
import org.springframework.cloud.circuitbreaker.resilience4j.Resilience4JConfigBuilder;
import org.springframework.cloud.client.circuitbreaker.Customizer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig;
import io.github.resilience4j.timelimiter.TimeLimiterConfig;

@Configuration
public class CircuitBreakerConfiguration {

	
	@Bean
	public Customizer<Resilience4JCircuitBreakerFactory> globalCustomeConfiguration(){
		
		// the circuitBreakerConfig and timeLimiterConfig objects
		
		
		TimeLimiterConfig timeLimitConfig = TimeLimiterConfig.custom().timeoutDuration(Duration.ofSeconds(4)).build();
		
		CircuitBreakerConfig circuitBreakerConfig = CircuitBreakerConfig.custom().failureRateThreshold(50).waitDurationInOpenState(Duration.ofMillis(1000)).slidingWindowSize(2).build();
		
		return factory -> factory.configureDefault(id->new Resilience4JConfigBuilder(id).timeLimiterConfig(timeLimitConfig).circuitBreakerConfig(circuitBreakerConfig).build());
	}
}
